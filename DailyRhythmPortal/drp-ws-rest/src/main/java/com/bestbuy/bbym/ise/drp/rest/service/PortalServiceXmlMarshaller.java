package com.bestbuy.bbym.ise.drp.rest.service;

import java.io.File;
import java.io.StringWriter;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.transform.stream.StreamSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PortalServiceXmlMarshaller {

    private static Logger logger = LoggerFactory.getLogger(PortalServiceXmlMarshaller.class);

    public static String marshalToXML(Object object) {
	if (object == null){
	    return "";
	}
	try{
	    // now do some magic to convert the object hierarchy to XML
	    JAXBContext jc = getMarshallContext(object.getClass().getPackage().getName());
	    // marshal to a string
	    Marshaller m = jc.createMarshaller();
	    m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
	    m.setProperty(Marshaller.JAXB_ENCODING, "UTF-8");
	    StringWriter sw = new StringWriter();
	    m.marshal(object, sw);
	    return sw.toString();
	}catch(JAXBException e){
	    logger.error("Failed to marshall to XML", e);
	}
	return "";
    }

    public static Object unmarshalFromXML(File file, String packageName) throws JAXBException {
	if (file == null){
	    return null;
	}
	try{
	    // create a JAXBContext capable of handling classes generated by
	    // the specified package
	    JAXBContext jc = getUnMarshallContext(packageName);
	    Unmarshaller u = jc.createUnmarshaller();
	    Object o = u.unmarshal(new StreamSource(file));
	    if (o != null){
	    }
	    return o;
	}catch(JAXBException e){
	    logger.error("Failed to unmarshall XML", e);
	    throw e;
	}
    }

    protected static final JAXBContext getMarshallContext(String name) throws JAXBException {
	JAXBContext context = JAXBContext.newInstance(name);
	return context;
    }

    protected static final JAXBContext getUnMarshallContext(String name) throws JAXBException {
	JAXBContext context = JAXBContext.newInstance(name);
	return context;
    }
}
